{"version":3,"file":"cardPaginate.min.js","sources":["../src/cardPaginate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for the cardPaginate_preview of the\n * add_random_form class.\n *\n * @module    local_costcenter/cardPaginate\n * @package   local_costcenter\n * @copyright 2018 eabyas info solutions <http://eabyas.in>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n define(\n    [\n        'jquery',\n        'core/ajax',\n        'core/str',\n        'core/notification',\n        'core/templates',\n        'local_costcenter/paged_content_factory'\n    ],\n    function(\n        $,\n        Ajax,\n        Str,\n        Notification,\n        Templates,\n        PagedContentFactory\n    ) {\n\n    var ITEMS_PER_PAGE = 6;\n    var methodName = '';\n    var TEMPLATE_NAME = '';\n    var targetID = '';\n    var targetRoot = '';\n    var Target = '';\n    var offset = 0;\n    var viewType = 'card';//table/card\n\n    var SELECTORS = {\n        LOADING_ICON_CONTAINER: '[data-region=\"overlay-icon-container\"]',\n        PAGINATE_COUNT_CONTAINER: '[data-region=\"'+targetID+'-count-container\"]',\n        PAGINATE_LIST_CONTAINER: '[data-region=\"'+targetID+'-list-container\"]'\n    };\n\n    var setOptions = function(options){\n        \n        methodName = options.methodName;\n        TEMPLATE_NAME = options.templateName;\n        if(options.hasOwnProperty('targetID')){\n            targetID = options.targetID;\n            targetRoot = $('#'+targetID);\n        }\n        if(options.hasOwnProperty('perPage') && typeof(options.perPage) == 'number'){\n            ITEMS_PER_PAGE = options.perPage;\n        }\n        SELECTORS = {\n            LOADING_ICON_CONTAINER: '[data-region=\"overlay-icon-container\"]',\n            PAGINATE_COUNT_CONTAINER: '[data-region=\"'+targetID+'-count-container\"]',\n            PAGINATE_LIST_CONTAINER: '[data-region=\"'+targetID+'-list-container\"]'\n        };\n    }\n\n    /**\n     * Show the loading spinner over the preview section.\n     *\n     * @param  {jquery} targetID The targetID element.\n     */\n    var showLoadingIcon = function(targetRoot) {\n        targetRoot.find(SELECTORS.LOADING_ICON_CONTAINER).removeClass('hidden');\n    };\n\n    /**\n     * Hide the loading spinner.\n     *\n     * @param  {jquery} targetID The targetID element.\n     */\n    var hideLoadingIcon = function(targetRoot) {\n        targetRoot.find(SELECTORS.LOADING_ICON_CONTAINER).addClass('hidden');\n    };\n\n    /**\n     * Render the section of text to show the record count.\n     *\n     * @param  {jquery} targetID The targetID element.\n     * @param  {int} recordCount The number of records.\n     */\n    // var renderrecordCount = function(targetRoot, totalCount) {\n    //     Str.get_string('Paginate_totalCount', 'local_costcenter', totalCount)\n    //         .then(function(string) {\n    //             targetRoot.find(SELECTORS.PAGINATE_COUNT_CONTAINER).html(string);\n    //             return;\n    //         })\n    //         .fail(Notification.exception);\n    // };\n\n    /**\n     * Send a request to the server for more records.\n     *\n     * @param  {int} userId All records user id.\n     * @param  {int} contextId The context where the records will be added.\n     * @param  {int} limit How many records to retrieve.\n     * @param  {int} offset How many records to skip from the start of the result set.\n     * @return {promise} Resolved when the preview section has rendered.\n     */\n    var requestMethod = function(options, dataoptions, filterdata) {\n        var request = {\n            methodname: options.methodName,\n            args: {\n                contextid: dataoptions.contextid,\n                options: JSON.stringify(options),\n                dataoptions: JSON.stringify(dataoptions),\n                offset: options.offset,\n                limit: options.perPage,\n                filterdata: JSON.stringify(filterdata)\n            }\n        };\n        return Ajax.call([request])[0];\n    };\n\n    /**\n     * Build a paged content widget for records with the given criteria. The\n     * criteria is used to fetch more records from the server as the user\n     * requests new pages.\n     *\n     * @param  {object[]} options All records user id.\n     * @param  {object[]} dataoptions The context where the records will be added.\n     * @param  {int} totalCount How many records match the criteria above.\n     * @param  {object[]} firstrecords cardPaginates List of records for the first page.\n     * @return {promise} A promise resolved with the HTML and JS for the paged content.\n     */\n    var renderAsPagedContent = function(options, dataoptions, totalCount, firstresponse,filterdata){\n        // to control how the records on each page are rendered.\n        return PagedContentFactory.createFromAjax(totalCount, ITEMS_PER_PAGE,\n            // Callback function to render the requested pages.\n            function(pagesData) {\n                return pagesData.map(function(pageData) {\n                    var offset = pageData.offset;\n                    var limit = pageData.limit;\n                        options.offset = offset;\n                        options.limit = limit;\n                        \n                        if(offset > 0){\n                            return requestMethod(options, dataoptions, filterdata)\n                            .then(function(response) {\n                                var records = response.records;\n                                response[\"cardClass\"] = options.cardClass;\n                                \n                                response[\"viewtypeCard\"] = false;\n                                if(options.viewType == \"card\" || options.viewType == \"table\"){\n                                    response[\"viewtypeCard\"] = true;\n                                }\n                                return Templates.render(options.templateName, {response: response});\n                            })\n                            .fail(Notification.exception);\n                        } else {\n                                firstresponse[\"cardClass\"] = options.cardClass;\n                                \n                                firstresponse[\"viewtypeCard\"] = false;\n                                if(options.viewType == \"card\" || options.viewType == \"table\"){\n                                    firstresponse[\"viewtypeCard\"] = true;\n                                }\n                            return Templates.render(options.templateName, {response: firstresponse});\n                        }\n                    // }\n                });\n            },\n        // Config to set up the paged content.\n        {\n            controlPlacementBottom: true,\n            eventNamespace: 'paginate-paged-content-'+options.targetID,\n            persistentLimitKey: 'paginate-paged-content-limit-key'\n        }\n        );\n    };\n\n    /**\n     * Re-render the preview section based on the provided filter criteria.\n     *\n     * @param  {jquery} targetID The targetID element.\n     * @param  {int} userId All records user id.\n     * @param  {int} contextId The context where the records will be added.\n     * @return {promise} Resolved when the preview section has rendered.\n     */\n    var reload = function(options, dataoptions,filterdata) {\n        //alert(\"hi\");\n        setOptions(options);\n\n        // Show the loading spinner to tell the user that something is happening.\n        showLoadingIcon(targetRoot);\n\n        // Load the first set of records.\n        options.offset = 0;\n        return requestMethod(options, dataoptions,filterdata)\n            .then(function(response) {\n\n                var totalCount = response.totalcount;\n                var records = response.records;\n                //console.log(dataoptions.blocktype);return false;\n               /*  if(dataoptions.blocktype == 'completed' && $('.completed').has(\"span\")){\n                    $('.completed_count').html('('+totalCount+')');                \n                }\n                if(dataoptions.blocktype == 'inprogress' && $('.inprogress').has(\"span\")){\n                    $('.inprogress_count').html('('+totalCount+')');                \n                } */\n                if (records.length) {\n                    // We received some records so render them as paged content\n                    // with a paging bar.\n                    return renderAsPagedContent(options, dataoptions, totalCount, response, filterdata);\n                } else {\n                    // If we didn't receive any records then we can return empty\n                    // HTML and JS to clear the preview section.\n                    // console.log(response.extraparams.nodata);\n                    if(response.nodata){\n                        return Templates.render(options.templateName, {response: response});\n                    }else{\n                        return Templates.render('local_costcenter/no-data', {response: response});\n                    }\n                    \n                    //return $.Deferred().resolve('', '');\n                }\n            })\n            .then(function(html, js) {\n                // Show the user the records set.\n                targetRoot = $('#'+options.targetID);\n                var paginatelistcontainer = '[data-region=\"'+options.targetID+'-list-container\"]';\n                var container = targetRoot.find(paginatelistcontainer);\n                Templates.replaceNodeContents(container, html, js);\n                return;\n            })\n            .always(function() {\n                targetRoot = $('#'+options.targetID);\n                hideLoadingIcon(targetRoot);\n            })\n            .fail(Notification.exception);\n\n    };\n\n\n    //added for the filtering the data\n    var filteringData = function(e,submitid) {\n        var formdata =  $(\"form#\"+submitid+\"\").serializeArray();\n        values = [];\n        filterdatavalue = [];\n        $.each(formdata, function (i, field) {\n            valuedata = [];\n            if(field.name != '_qf__filters_form' && field.name != 'sesskey'){\n                if(field.name == 'options' || field.name == 'dataoptions'){\n                    values[field.name] = field.value;\n                }else{\n                    var str = field.name;\n                    if(str.indexOf('[]') != -1){\n                        field.name = str.substring(0, str.length - 2);\n                    }\n                    if(field.name in filterdatavalue){\n                        filterdatavalue[field.name] = filterdatavalue[field.name]+','+field.value;\n                    }else{  \n                        filterdatavalue[field.name] = field.value;\n                    }\n                }\n\n            }\n        });\n        var filtervalue = $('#global_filter').val();\n        if(filtervalue){\n            filterdatavalue[$('#global_filter').attr('name')] = filtervalue;\n        }\n        optionsparsondata     = JSON.parse(values['options']);\n        dataoptionsparsondata = JSON.parse(values['dataoptions']);\n        // filterdataparsondata  =  Object.assign({}, filterdatavalue);\n        filterdataparsondata = $.extend({}, filterdatavalue);\n        $('#global_filter').attr('data-filterdata', JSON.stringify(filterdataparsondata));\n        return reload(optionsparsondata, dataoptionsparsondata,filterdataparsondata);\n    };\n\n    //added for the reset the data\n    var resetingData = function(e,submitid) {\n        var formdata =  $(\"form#\"+submitid+\"\").serializeArray();\n        console.log(formdata);\n        values = [];\n        filterdatavalue = [];\n        $.each(formdata, function (i, field) {\n            valuedata = [];\n            if(field.name != '_qf__filters_form' && field.name != 'sesskey'){\n                if(field.name == 'options' || field.name == 'dataoptions'){\n                    values[field.name] = field.value;\n                }\n            }\n        });\n        var filtervalue = $('#global_filter').val();\n        if(filtervalue){\n            filterdatavalue[$('#global_filter').attr('name')] = filtervalue;\n        }\n        optionsparsondata     = JSON.parse(values['options']);\n        dataoptionsparsondata = JSON.parse(values['dataoptions']);\n        // filterdataparsondata  =  Object.assign({}, filterdatavalue);\n        filterdataparsondata = $.extend({}, filterdatavalue);\n        $('#global_filter').attr('data-filterdata', '[]');\n        // $('#global_filter').data('filterdata', '[]');\n        reload(optionsparsondata, dataoptionsparsondata, filterdataparsondata);\n        var reset =  $(\"form#\"+submitid+\"\")[0].reset();\n        // $(\"#fitem_id_acceptchallengedate_\"+submitid+\" .custom-select\").attr(\"disabled\", \"disabled\");\n        // $(\"#fitem_id_challengeenddate_\"+submitid+\" .custom-select\").attr(\"disabled\", \"disabled\");\n        $(\".tag-info\").html(\"\");\n        $(\".badge-secondary\").html(\"\");\n       /*  alert();\n        $(\"div.date_selector select.custom-select\").attr(\"disabled\", \"disabled\");\n        $(\"div.date_selector a.visibleifjs\").prop(\"style\",\"\"); */\n        $(\"div.form-autocomplete-selection span.mb-3\").html(\"No selection\");\n        $(\"div.form-autocomplete-selection span.mb-3\").removeClass(\"tag-info\");\n        $(\"div.form-autocomplete-selection span.mb-3\").removeClass(\"badge-secondary\");\n        $(\"div.form-autocomplete-selection span.mb-3\").removeClass(\"tag\");\n        $(\"div.form-autocomplete-selection span.mb-3\").removeClass(\"badge\");\n    };\n    return {\n        reload: reload,\n        showLoadingIcon: showLoadingIcon,\n        hideLoadingIcon: hideLoadingIcon,\n        filteringData:filteringData,\n        resetingData:resetingData\n    };\n});\n"],"names":["define","$","Ajax","Str","Notification","Templates","PagedContentFactory","ITEMS_PER_PAGE","targetID","targetRoot","SELECTORS","LOADING_ICON_CONTAINER","PAGINATE_COUNT_CONTAINER","PAGINATE_LIST_CONTAINER","showLoadingIcon","find","removeClass","hideLoadingIcon","addClass","requestMethod","options","dataoptions","filterdata","request","methodname","methodName","args","contextid","JSON","stringify","offset","limit","perPage","call","reload","templateName","hasOwnProperty","setOptions","then","response","totalCount","totalcount","records","length","firstresponse","createFromAjax","pagesData","map","pageData","cardClass","viewType","render","fail","exception","controlPlacementBottom","eventNamespace","persistentLimitKey","renderAsPagedContent","nodata","html","js","paginatelistcontainer","container","replaceNodeContents","always","filteringData","e","submitid","formdata","serializeArray","values","filterdatavalue","each","i","field","valuedata","name","value","str","indexOf","substring","filtervalue","val","attr","optionsparsondata","parse","dataoptionsparsondata","filterdataparsondata","extend","resetingData","console","log","reset"],"mappings":"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"}