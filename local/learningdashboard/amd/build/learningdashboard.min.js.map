{"version":3,"file":"learningdashboard.min.js","sources":["../src/learningdashboard.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_learningdashboard/learningdashboard\n * @class      learningdashboard\n * @package    local_learningdashboard\n * @copyright  Moodle India\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later \n */\ndefine(['local_courses/jquery.dataTables', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui', 'core/templates', 'local_learningdashboard/graph'],\n    function (dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y, Templates, Graph) {\n\n        /**\n        * Constructor\n        *\n        * @param {object} args\n        *\n        * Each call to init gets it's own instance of this class.\n        */\n        var learningdashboard = function (args) {\n            this.contextid = args.contextid ? args.contextid : 1;\n            this.args = args;\n            this.init(args);\n            this.tunit = args.tunit;\n        };\n\n        /**\n        * @var {Modal} modal\n        * @private\n        */\n        learningdashboard.prototype.modal = null;\n\n        /**\n        * @var {int} contextid\n        * @private\n        */\n        learningdashboard.prototype.contextid = -1;\n\n        /**\n        * Initialise the class.\n        *\n        * @param {String} selector used to find triggers for the new group modal.\n        * @private\n        * @return {Promise}\n        */\n        learningdashboard.prototype.init = function (args) {\n            // Fetch the title string.\n            var self = this;\n            var popuptittle = this.args.ismanager ? this.args.userfullname : this.args.creditstype\n            var coursecount = this.args.coursecount;\n            var params = {title : popuptittle, count: coursecount}\n            var head = {\n                key: 'popuptittle', component: 'local_learningdashboard',param : params\n            };\n            customstrings = Str.get_strings([head,\n                {\n                    key: 'squads', component: 'local_learningdashboard'\n                },\n                ]);\n\n\n\n            return customstrings.then(function (strings) {\n                // Create the modal.\n                var title = '';\n                if (this.args.callback == 'coursespopup') {\n                    title = strings[0];\n                } else if (this.args.callback == 'squads') {\n                    title = strings[1];\n                } else if (this.args.callback == 'users') {\n                    title = strings[2];\n                } else if (this.args.callback == 'instructors') {\n                    title = strings[3];\n                }else if (this.args.callback == 'reviews') {\n                    title = strings[5];\n                }else if (this.args.callback == 'gradeshistory') {\n                    title = strings[6];\n                }\n                return ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: title,\n                    body: this.getBody(),\n                });\n            }.bind(this)).then(function (modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function () {\n                    self.modal.setBody('');\n                    self.modal.hide();\n                    self.modal.destroy();\n                }.bind(this));\n\n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.cancel, function () {\n                    self.modal.setBody('');\n                    self.modal.hide();\n                    self.modal.destroy();\n                }.bind(this));\n                this.modal.getRoot().on(ModalEvents.bodyRendered, function () {\n                    this.dataTableshow(args.tunit);\n                }.bind(this));\n                self.modal.show();\n                return this.modal;\n            }.bind(this));\n        };\n        learningdashboard.prototype.dataTableshow = function (tunit) {\n            // console.log(tunit);\n            $.fn.dataTable.ext.errMode = 'none';\n            $('.managementpopuptable_details').dataTable({\n                'bPaginate': true,\n                'bFilter': true,\n                'bLengthChange': true,\n                'lengthMenu': [\n                    [5, 10, 25, 50, 100, -1],\n                    [5, 10, 25, 50, 100, 'All']\n                ],\n                'language': {\n                    'emptyTable': 'No Records Found',\n                    'paginate': {\n                        'previous': '<',\n                        'next': '>'\n                    }\n                },\n\n                'bProcessing': true,\n            });\n        };\n        /**\n        * @method getBody\n        * @private\n        * @return {Promise}\n        */\n        learningdashboard.prototype.getBody = function (args) {\n            // Get the content of the modal.\n            console.log(this.args);\n            return Fragment.loadFragment(this.args.component, this.args.callback, 1, this.args);\n        };\n        /**\n        * @method getFooter\n        * @private\n        * @return {Promise}\n        */\n        learningdashboard.prototype.getFooter = function (customstrings) {\n            var footer = '';\n            footer = '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">' + customstrings[0] + '</button>';\n            return footer;\n            // }.bind(this));\n        };\n        /**\n        * @method getFooter\n        * @private\n        * @return {Promise}\n        */\n        learningdashboard.prototype.getcontentFooter = function () {\n            return Str.get_strings([{\n                key: 'cancel'\n            }]).then(function (s) {\n                $footer = '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">' + s[1] + '</button>';\n                return $footer;\n            }.bind(this));\n        };\n        var users;\n        return /** @alias module:core_group/learningdashboard */users= {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function (args) {\n                // this.Datatable();\n                return new learningdashboard(args);\n            },\n            Datatable: function () {\n\n            },\n            teamsstatus: function (args) {\n                $('.learningdashboard_team_status').dataTable({\n                    'bPaginate': true,\n                    'bFilter': true,\n                    'bLengthChange': false,\n                    \"pageLength\" : 5,\n                    // 'lengthMenu': [\n                    //     [5, 10, 25, 50, 100, -1],\n                    //     [5, 10, 25, 50, 100, 'All']\n                    // ],\n                    'language': {\n                        'emptyTable': 'No Records Found',\n                        'paginate': {\n                            'previous': '<',\n                            'next': '>'\n                        }\n                    },\n\n                    'bProcessing': true,\n                    'ordering': false,\n                });\n\n                $.fn.dataTable.ext.errMode = 'none';\n            },\n            creditsdata: function (args) {\n                $(document).on('click', '.completed, .pending', function () {\n                    creditsview(this);\n                });\n                function creditsview(obj){\n                    var status = 'completed'\n                        if($(obj).hasClass(\"pending\")){\n                            status = 'pending'\n                            $(obj).addClass('active');\n                            $('.completed').removeClass('active');\n                        }\n                        if(status == 'completed'){\n                            $(obj).addClass('active');\n                            $('.pending').removeClass('active');\n                        }        \n                    const params = { status: status};\n                    var promise = Ajax.call([{\n                        methodname: 'local_learningdashboard_creditsdata_view',\n                        args: params,\n                        dataType : 'json'\n                    }]);\n                    $(\"#creditstables\").empty();\n                    promise[0].done(function (resp) {\n                        console.log(resp);\n                        if (resp.totalcount == 0) {\n                            $('#creditstables').html('<div class=\"text-center calendar_events attempt_text\"><h4>No Events Available on this Date.</></h4></div>');\n                        } else {\n                            var data = Templates.render('local_learningdashboard/creditsdata_view',  resp.records );\n                            data.then(function (html, js) {\n                                $('#creditstables').html(html);\n                            });\n                        }\n                        Graph.init(resp.graphdata);\n\n                        const obj = JSON.parse(resp.records.data);\n                        $('head').append(obj.javascript);\n                    }).fail(function (ex) {\n                        // do something with the exception\n                        console.log(ex);\n                    });\n                }\n                creditsview();                \n            },\n            \n            load: function () {\n                // $(\".completed\").trigger(\"click\");\n            }\n        };\n    });\n"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Templates","Graph","learningdashboard","args","contextid","init","tunit","prototype","modal","self","this","head","key","component","param","title","ismanager","userfullname","creditstype","count","coursecount","customstrings","get_strings","then","strings","callback","create","type","types","CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","hide","destroy","cancel","bodyRendered","dataTableshow","show","fn","ext","errMode","console","log","loadFragment","getFooter","getcontentFooter","s","$footer","Datatable","teamsstatus","creditsdata","creditsview","obj","status","hasClass","addClass","removeClass","params","promise","call","methodname","dataType","empty","done","resp","totalcount","html","render","records","js","graphdata","JSON","parse","data","append","javascript","fail","ex","document","load"],"mappings":"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"}