{"version":3,"sources":["../src/newcat.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewCat","args","contextid","categoryid","self","init","selector","prototype","modal","console","log","editid","data","instituteid","alert","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","show","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","e","preventDefault","formData","find","serialize","call","methodname","done","fail","submit","load"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_location/location\n * @class      NewInstitute\n * @package    local_location\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewCat = function(args) {\n        this.contextid = args.contextid;\n\n\n        this.categoryid = args.categoryid;\n        var self = this;\n        self.init(args.selector);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewCat.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewCat.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewCat.prototype.init = function(args) {\n        console.log(args);\n        //var triggers = $(selector);\n        var self = this;\n\n\n\n        // Fetch the title string.\n        // $('.'+args.selector).click(function(){\n\n\n            var editid = $(this).data('value');\n            if (editid) {\n                self.instituteid = editid;\n                console.log(self.instituteid);\n                alert(self.instituteid);\n            }\n            return Str.get_string('adnewcat', 'local_classroom').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: self.getBody()\n                });\n            }.bind(self)).then(function(modal) {\n\n                // Keep a reference to the modal.\n                self.modal = modal;\n                self.modal.show();\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.setBody(self.getBody());\n                }.bind(this));\n\n                // We want to hide the submit buttons every time it is opened.\n                self.modal.getRoot().on(ModalEvents.shown, function() {\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                }.bind(this));\n\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\n                return this.modal;\n            }.bind(this));\n\n\n        // });\n\n    };\n\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewCat.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // alert(formdata);\n        // Get the content of the modal.\n        var params = {instituteid:this.instituteid, jsonformdata: JSON.stringify(formdata)};\n        return Fragment.loadFragment('local_classroom', 'new_catform', this.contextid, params);\n    };\n\n    /**\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewCat.prototype.handleFormSubmissionResponse = function() {\n        this.modal.hide();\n        // We could trigger an event instead.\n        // Yuk.\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n        document.location.reload();\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewCat.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    NewCat.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        // alert(this.contextid);\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'local_location_submit_catform_form',\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\n            done: this.handleFormSubmissionResponse.bind(this, formData),\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\n        }]);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewCat.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:local_location/newlocation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n\n            // alert(args.contextid);\n            return new NewCat(args);\n        },\n        load: function(){\n\n        }\n    };\n});"],"file":"newcat.min.js"}