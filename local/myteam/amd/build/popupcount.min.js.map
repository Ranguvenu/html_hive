{"version":3,"sources":["../src/popupcount.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","NewPopup","args","contextid","self","init","selector","prototype","modal","document","on","id","data","username","moduletype","get_string","then","title","create","type","types","CANCEL","body","getBody","done","setLarge","getRoot","hidden","hide","destroy","bind","cancel","show","bodyRendered","formdata","params","jsonformdata","JSON","stringify","loadFragment"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_myteam/popupcount\n * @class      popupcount\n * @package    local_myteam\n * @copyright  2018 sarath\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\n        'core/fragment', 'core/ajax', 'core/yui', 'jqueryui'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n \n    /**\n     * Constructor\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @param {int} contextid\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewPopup = function(args) {\n        this.contextid = args.contextid;\n        // this.id = args.id;\n        // this.username = args.username;\n        // this.moduletype = args.moduletype;\n        var self = this;\n        self.init(args.selector);\n    };\n \n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewPopup.prototype.modal = null;\n \n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewPopup.prototype.contextid = -1;\n \n    /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewPopup.prototype.init = function(selector) {\n        //var triggers = $(selector);\n        \n        var self = this;\n        // $(selector).click(function(){\n        $(document).on('click', selector, function(){\n            // self.contextid = 1;\n            self.id = $(this).data('userid');\n            self.username = $(this).data('username');\n            self.moduletype = $(this).data('moduletype');\n  \n            Str.get_string('myteaminfo', 'local_myteam',self).then(function(title) {\n            ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                    title: title,\n                    body: self.getBody()\n                }).done(function(modal) {\n                    // Keep a reference to the modal.\n                    self.modal = modal;\n\n                    // Forms are big, we want a big modal.\n                    self.modal.setLarge();\n         \n                    // We want to reset the form every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\n                        // self.modal.setBody('');\n                        self.modal.hide();\n                        self.modal.destroy();\n                    }.bind(this));\n\n                    // We want to reset the form every time it is opened.\n                    self.modal.getRoot().on(ModalEvents.cancel, function() {\n                        // self.modal.setBody('');\n                        self.modal.hide();\n                        self.modal.destroy();\n                    }.bind(this));\n                    self.modal.show();\n\n                    self.modal.getRoot().on(ModalEvents.bodyRendered, function() {\n                         //self.dataTableshow();\n                    }.bind(this));                                    \n                                  \n                });    \n\n            });\n        });\n                    \n    };\n    /**\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewPopup.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        \n        // Get the content of the modal.\n        if(typeof this.id != 'undefined'){\n            var params = {id:this.id, moduletype:this.moduletype, jsonformdata: JSON.stringify(formdata)};\n        }else{\n            var params = {};\n        }\n        return Fragment.loadFragment('local_myteam', 'users_display_modulewise', this.contextid, params);\n    };\n \n \n    return /** @alias module:local_evaluation/newevaluation */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n         * @param {int} contextid The contextid for the course.\n         * @return {Promise}\n         */\n        init: function(args) {\n            // alert('there');\n            return new NewPopup(args);\n        },\n    };\n});"],"file":"popupcount.min.js"}